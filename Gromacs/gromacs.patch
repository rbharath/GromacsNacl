diff --git a/CMakeLists.txt b/CMakeLists.txt
index 455a14e..841ff76 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1125,6 +1125,8 @@ if(HAVE_LIBM)
     list(APPEND	GMX_EXTRA_LIBRARIES m)
 endif(HAVE_LIBM)
 
+list(APPEND GMX_EXTRA_LIBRARIES nosys)
+
 if(GMX_FAHCORE)
   set(COREWRAP_INCLUDE_DIR "${CMAKE_SOURCE_DIR}/../corewrap" CACHE STRING 
       "Path to swindirect.h")
@@ -1137,7 +1139,7 @@ endif(GMX_FAHCORE)
 if (NOT GMX_SKIP_DEFAULT_CFLAGS)
     set(CMAKE_C_FLAGS "${ACCELERATION_C_FLAGS} ${MPI_COMPILE_FLAGS} ${EXTRA_C_FLAGS} ${CMAKE_C_FLAGS}")
     set(CMAKE_CXX_FLAGS "${ACCELERATION_CXX_FLAGS} ${MPI_COMPILE_FLAGS} ${CMAKE_CXX_FLAGS}")
-    set(CMAKE_EXE_LINKER_FLAGS "${FFT_LINKER_FLAGS} ${MPI_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS}")
+    set(CMAKE_EXE_LINKER_FLAGS "${FFT_LINKER_FLAGS} ${MPI_LINKER_FLAGS} ${CMAKE_EXE_LINKER_FLAGS} -lnosys")
     set(CMAKE_SHARED_LINKER_FLAGS "${MPI_LINKER_FLAGS} ${CMAKE_SHARED_LINKER_FLAGS}")
 else()
     message("Recommended flags which are not added because GMX_SKIP_DEFAULT_CFLAGS=yes:")
diff --git a/src/contrib/fftw/CMakeLists.txt b/src/contrib/fftw/CMakeLists.txt
index 6787c83..405a552 100644
--- a/src/contrib/fftw/CMakeLists.txt
+++ b/src/contrib/fftw/CMakeLists.txt
@@ -35,14 +35,14 @@ if(CMAKE_VERSION VERSION_LESS 2.8.3)
     message(WARNING "GROMACS is downloading FFTW ${EXTERNAL_FFTW_VERSION}, but your version of CMake is too old to allow GROMACS to check that the archive it receives is correct. GROMACS will build and link to FFTW anyway, but there is a security risk if you execute a GROMACS tool that calls this library. Either build your own FFTW, or update CMake to at least version 2.8.3.")
         ExternalProject_add(gmxfftw
             URL "http://www.fftw.org/fftw-${EXTERNAL_FFTW_VERSION}.tar.gz"
-            CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR>
+            CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --host=x86_64-nacl
             ${GMX_BUILD_OWN_FFTW_SHARED_FLAG} ${GMX_BUILD_OWN_FFTW_OPTIMIZATION_CONFIGURATION}
             ${GMX_BUILD_OWN_FFTW_PREC})
 else()
     ExternalProject_add(gmxfftw
         URL "http://www.fftw.org/fftw-${EXTERNAL_FFTW_VERSION}.tar.gz"
         URL_MD5 ${EXTERNAL_FFTW_VERSION_MD5_SUM}
-        CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR>
+        CONFIGURE_COMMAND <SOURCE_DIR>/configure --prefix=<INSTALL_DIR> --host=x86_64-nacl
         ${GMX_BUILD_OWN_FFTW_SHARED_FLAG} ${GMX_BUILD_OWN_FFTW_OPTIMIZATION_CONFIGURATION}
         ${GMX_BUILD_OWN_FFTW_PREC})
 endif()
diff --git a/src/gmxlib/checkpoint.c b/src/gmxlib/checkpoint.c
index f4b602d..ff2d329 100644
--- a/src/gmxlib/checkpoint.c
+++ b/src/gmxlib/checkpoint.c
@@ -1764,7 +1764,7 @@ static void read_checkpoint(const char *fn, FILE **pfplog,
     t_fileio            *chksum_file;
     FILE               * fplog = *pfplog;
     unsigned char        digest[16];
-#ifndef GMX_NATIVE_WINDOWS
+#if !defined(GMX_NATIVE_WINDOWS) && !defined(__native_client__)
     struct flock         fl; /* don't initialize here: the struct order is OS
                                 dependent! */
 #endif
@@ -1777,7 +1777,7 @@ static void read_checkpoint(const char *fn, FILE **pfplog,
         "      while the simulation uses %d SD or BD nodes,\n"
         "      continuation will be exact, except for the random state\n\n";
 
-#ifndef GMX_NATIVE_WINDOWS
+#if !defined(GMX_NATIVE_WINDOWS) && !defined(__native_client__)
     fl.l_type   = F_WRLCK;
     fl.l_whence = SEEK_SET;
     fl.l_start  = 0;
@@ -2074,9 +2074,11 @@ static void read_checkpoint(const char *fn, FILE **pfplog,
                  * will succeed, but a second process can also lock the file.
                  * We should probably try to detect this.
                  */
-#ifndef GMX_NATIVE_WINDOWS
+#if !defined(GMX_NATIVE_WINDOWS) && !defined(__native_client__)
                 if (fcntl(fileno(gmx_fio_getfp(chksum_file)), F_SETLK, &fl)
                     == -1)
+#elif defined(__native_client__)
+                if (1)
 #else
                 if (_locking(fileno(gmx_fio_getfp(chksum_file)), _LK_NBLCK, LONG_MAX) == -1)
 #endif
diff --git a/src/gmxlib/futil.c b/src/gmxlib/futil.c
index a9e957c..1a1853d 100644
--- a/src/gmxlib/futil.c
+++ b/src/gmxlib/futil.c
@@ -128,19 +128,23 @@ void push_ps(FILE *fp)
 
 #ifndef GMX_FAHCORE
 #ifndef HAVE_PIPES
-static FILE *popen(const char *nm, const char *mode)
+static FILE *_popen(const char *nm, const char *mode)
 {
     gmx_impl("Sorry no pipes...");
 
     return NULL;
 }
 
-static int pclose(FILE *fp)
+static int _pclose(FILE *fp)
 {
     gmx_impl("Sorry no pipes...");
 
     return 0;
 }
+
+#define popen _popen
+#define pclose _pclose
+
 #endif
 #endif
 
diff --git a/src/gmxlib/thread_mpi/atomic.c b/src/gmxlib/thread_mpi/atomic.c
index b9f5e0e..43becaf 100644
--- a/src/gmxlib/thread_mpi/atomic.c
+++ b/src/gmxlib/thread_mpi/atomic.c
@@ -35,6 +35,10 @@
    files.
  */
 
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
 #include "impl.h"
 
 /* This file is only needed when no intrinsic atomic operations are present. */
diff --git a/src/kernel/genalg.c b/src/kernel/genalg.c
index 27f9b5a..3f217bc 100644
--- a/src/kernel/genalg.c
+++ b/src/kernel/genalg.c
@@ -66,7 +66,11 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
+#ifdef __native_client__
+#include <malloc.h>
+#else
 #include <memory.h>
+#endif
 #include "typedefs.h"
 #include "smalloc.h"
 #include "futil.h"
diff --git a/src/kernel/md.c b/src/kernel/md.c
index 0ab2b93..aa1a60c 100644
--- a/src/kernel/md.c
+++ b/src/kernel/md.c
@@ -1086,9 +1086,7 @@ double do_md(FILE *fplog, t_commrec *cr, int nfile, const t_filenm fnm[],
          * or at the last step (but not when we do not want confout),
          * but never at the first step or with rerun.
          */
-        bCPT = (((gs.set[eglsCHKPT] && (bNS || ir->nstlist == 0)) ||
-                 (bLastStep && (Flags & MD_CONFOUT))) &&
-                step > ir->init_step && !bRerunMD);
+        bCPT = FALSE;
         if (bCPT)
         {
             gs.set[eglsCHKPT] = 0;
diff --git a/src/kernel/mdrun.c b/src/kernel/mdrun.c
index a5c0e6a..1ba482e 100644
--- a/src/kernel/mdrun.c
+++ b/src/kernel/mdrun.c
@@ -758,3 +758,20 @@ int cmain(int argc, char *argv[])
 
     return rc;
 }
+
+#include <pthread.h>
+
+int pthread_cancel(pthread_t thread) {
+  errno = ENOSYS;
+  return ENOSYS;
+}
+
+int gethostname(char *name, size_t len) {
+  errno = ENOSYS;
+  return -1;
+}
+
+int nice(int inc) {
+  errno = ENOSYS;
+  return -1;
+}
